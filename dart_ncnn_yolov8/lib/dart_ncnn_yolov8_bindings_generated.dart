// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/dart_ncnn_yolov8.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class DartNcnnYolov8Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartNcnnYolov8Bindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartNcnnYolov8Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// YOLO
  void yoloLoad(
    ffi.Pointer<ffi.Char> model_path,
    ffi.Pointer<ffi.Char> param_path,
    int target_size,
    int num_class,
    int use_gpu,
  ) {
    return _yoloLoad(
      model_path,
      param_path,
      target_size,
      num_class,
      use_gpu,
    );
  }

  late final _yoloLoadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int, ffi.Int)>>('yoloLoad');
  late final _yoloLoad = _yoloLoadPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int)>();

  void yoloUnload() {
    return _yoloUnload();
  }

  late final _yoloUnloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('yoloUnload');
  late final _yoloUnload = _yoloUnloadPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> detectWithImagePath(
    ffi.Pointer<ffi.Char> image_path,
    double prob_threshold,
    double nms_threshold,
    int target_size,
  ) {
    return _detectWithImagePath(
      image_path,
      prob_threshold,
      nms_threshold,
      target_size,
    );
  }

  late final _detectWithImagePathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Float,
              ffi.Float, ffi.Int)>>('detectWithImagePath');
  late final _detectWithImagePath = _detectWithImagePathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, double, double, int)>();

  ffi.Pointer<ffi.Char> detectWithPixels(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int pixelType,
    int width,
    int height,
    double prob_threshold,
    double nms_threshold,
    int target_size,
  ) {
    return _detectWithPixels(
      pixels,
      pixelType,
      width,
      height,
      prob_threshold,
      nms_threshold,
      target_size,
    );
  }

  late final _detectWithPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Int)>>('detectWithPixels');
  late final _detectWithPixels = _detectWithPixelsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, double, double, int)>();

  void yuv420sp2rgb(
    ffi.Pointer<ffi.UnsignedChar> yuv420sp,
    int width,
    int height,
    ffi.Pointer<ffi.UnsignedChar> rgb,
  ) {
    return _yuv420sp2rgb(
      yuv420sp,
      width,
      height,
      rgb,
    );
  }

  late final _yuv420sp2rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('yuv420sp2rgb');
  late final _yuv420sp2rgb = _yuv420sp2rgbPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void rgb2rgba(
    ffi.Pointer<ffi.UnsignedChar> rgb,
    int width,
    int height,
    ffi.Pointer<ffi.UnsignedChar> rgba,
  ) {
    return _rgb2rgba(
      rgb,
      width,
      height,
      rgba,
    );
  }

  late final _rgb2rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('rgb2rgba');
  late final _rgb2rgba = _rgb2rgbaPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void kannaRotate(
    ffi.Pointer<ffi.UnsignedChar> src,
    int channel,
    int srcw,
    int srch,
    ffi.Pointer<ffi.UnsignedChar> dst,
    int dsw,
    int dsh,
    int type,
  ) {
    return _kannaRotate(
      src,
      channel,
      srcw,
      srch,
      dst,
      dsw,
      dsh,
      type,
    );
  }

  late final _kannaRotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('kannaRotate');
  late final _kannaRotate = _kannaRotatePtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();
}
