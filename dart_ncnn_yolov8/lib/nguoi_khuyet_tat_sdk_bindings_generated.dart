// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/nguoi_khuyet_tat_sdk.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NguoiKhuyetTatSDKBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NguoiKhuyetTatSDKBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NguoiKhuyetTatSDKBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// YOLO
  void yuv420sp2rgb(
    ffi.Pointer<ffi.UnsignedChar> yuv420sp,
    int width,
    int height,
    ffi.Pointer<ffi.UnsignedChar> rgb,
  ) {
    return _yuv420sp2rgb(
      yuv420sp,
      width,
      height,
      rgb,
    );
  }

  late final _yuv420sp2rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('yuv420sp2rgb');
  late final _yuv420sp2rgb = _yuv420sp2rgbPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void rgb2rgba(
    ffi.Pointer<ffi.UnsignedChar> rgb,
    int width,
    int height,
    ffi.Pointer<ffi.UnsignedChar> rgba,
  ) {
    return _rgb2rgba(
      rgb,
      width,
      height,
      rgba,
    );
  }

  late final _rgb2rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('rgb2rgba');
  late final _rgb2rgba = _rgb2rgbaPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void kannaRotate(
    ffi.Pointer<ffi.UnsignedChar> src,
    int channel,
    int srcw,
    int srch,
    ffi.Pointer<ffi.UnsignedChar> dst,
    int dsw,
    int dsh,
    int type,
  ) {
    return _kannaRotate(
      src,
      channel,
      srcw,
      srch,
      dst,
      dsw,
      dsh,
      type,
    );
  }

  late final _kannaRotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('kannaRotate');
  late final _kannaRotate = _kannaRotatePtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>, int, int, int,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  void load(
    int deaf,
    int blind,
    ffi.Pointer<ffi.Char> object_detection_model,
    ffi.Pointer<ffi.Char> object_detection_param,
  ) {
    return _load(
      deaf,
      blind,
      object_detection_model,
      object_detection_param,
    );
  }

  late final _loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('load');
  late final _load = _loadPtr.asFunction<
      void Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void unLoad() {
    return _unLoad();
  }

  late final _unLoadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('unLoad');
  late final _unLoad = _unLoadPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> getEmbeddingFromPath(
    ffi.Pointer<ffi.Char> image_path,
  ) {
    return _getEmbeddingFromPath(
      image_path,
    );
  }

  late final _getEmbeddingFromPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('getEmbeddingFromPath');
  late final _getEmbeddingFromPath = _getEmbeddingFromPathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> detectFaceObjectWithPixels(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int width,
    int height,
  ) {
    return _detectFaceObjectWithPixels(
      pixels,
      width,
      height,
    );
  }

  late final _detectFaceObjectWithPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int)>>('detectFaceObjectWithPixels');
  late final _detectFaceObjectWithPixels =
      _detectFaceObjectWithPixelsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ffi.Char> getEmbeddingWithPixels(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int width,
    int height,
  ) {
    return _getEmbeddingWithPixels(
      pixels,
      width,
      height,
    );
  }

  late final _getEmbeddingWithPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int)>>('getEmbeddingWithPixels');
  late final _getEmbeddingWithPixels = _getEmbeddingWithPixelsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ffi.Char> detectMoney(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int width,
    int height,
  ) {
    return _detectMoney(
      pixels,
      width,
      height,
    );
  }

  late final _detectMoneyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Int)>>('detectMoney');
  late final _detectMoney = _detectMoneyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ffi.Char> detectObject(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int pixelType,
    int width,
    int height,
  ) {
    return _detectObject(
      pixels,
      pixelType,
      width,
      height,
    );
  }

  late final _detectObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int, ffi.Int)>>('detectObject');
  late final _detectObject = _detectObjectPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<ffi.Char> predictLightTraffic(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int width,
    int height,
  ) {
    return _predictLightTraffic(
      pixels,
      width,
      height,
    );
  }

  late final _predictLightTrafficPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int)>>('predictLightTraffic');
  late final _predictLightTraffic = _predictLightTrafficPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ffi.Char> predictDeaf(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int width,
    int height,
  ) {
    return _predictDeaf(
      pixels,
      width,
      height,
    );
  }

  late final _predictDeafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Int)>>('predictDeaf');
  late final _predictDeaf = _predictDeafPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ffi.Char> predictEmotion(
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int width,
    int height,
  ) {
    return _predictEmotion(
      pixels,
      width,
      height,
    );
  }

  late final _predictEmotionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int)>>('predictEmotion');
  late final _predictEmotion = _predictEmotionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, int)>();
}
